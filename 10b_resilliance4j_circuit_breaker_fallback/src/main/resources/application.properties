
server.port=9097

# the service name with which the this service will register itself in the eureka server
spring.application.name=service-two

# register the ip address of this service instance, it is prefered to do this because in the cloud env when instances are brought up automatically, 
# hostnames may not be registered in the DNS and this may not lead to service resolution.
eureka.instance.prefer-ip-address=true

# register this service instance with the eureka server
eureka.client.register-with-eureka=true

# fetch the complete list of service registry from eureka server, this is needed when this service needs to communicate with other services or config server
# the eureka client will cache the service registry list locally instead of going to eureka server every time. Every 30sec eureka client contacts eureka server to fetch any changes to the registry
eureka.client.fetch-registry=true

# location to find where the eureka server is running. This can be a comma separated values if there are multiple eureka server instances running.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


resilience4j.circuitbreaker.instances.service-one.registerHealthIndicator: true
resilience4j.circuitbreaker.instances.service-one.failureRateThreshold: 50
resilience4j.circuitbreaker.instances.service-one.waitDurationInOpenState: 5000
resilience4j.circuitbreaker.instances.service-one.ringBufferSizeInClosedState: 10
resilience4j.circuitbreaker.instances.service-one.ringBufferSizeInHalfOpenState: 5
resilience4j.circuitbreaker.instances.service-one.slidingWindowType: COUNT_BASED
resilience4j.circuitbreaker.instances.service-one.slidingWindowSize: 10
