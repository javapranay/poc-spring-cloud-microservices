# the service name with which the this service will register itself in the eureka server
spring.application.name=service-one

# enable discovering config server through eureka server, this property has to be in bootstrap.properties
spring.cloud.config.discovery.enabled=true


# config server service instance id in the eureka server registry, which is used to fetch ips 
# where config server instances are running. Specifies the service ID to look up in Eureka.
spring.cloud.config.discovery.service-id=config-server

# location to find where the eureka server is running. This can be a comma separated values if there are multiple eureka server instances running.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka




#All of this discovery process happens during the bootstrap phase of the Spring application context, 
#ensuring that the Config Server configuration is loaded before the main application context starts.
#######################
server.port=9090

#spring.jackson.serialization.INDENT_OUTPUT=true
#management.security.enabled=false

# register the ip address of this service instance, it is prefered to do this because in the cloud env
# when instances are brought up automatically, hostnames may not be registered in the DNS 
# and this may not lead to service resolution.
#eureka.instance.prefer-ip-address=true

# register this service instance with the eureka server
eureka.client.register-with-eureka=true

# fetch the complete list of service registry from eureka server, this is needed when this service needs to communicate with other services or config server
# the eureka client will cache the service registry list locally instead of going to eureka server every time. Every 30sec eureka client contacts eureka server to fetch any changes to the registry
eureka.client.fetch-registry=true

spring.config.import: optional:configserver: